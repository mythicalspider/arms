#!/bin/bash

# usage: lock {lock name (will be in /var/lock/)} [{max time in seconds to wait for lock}]
unset lock
lock() {
local location=$1
shift
local timeout=$1
if [ ! "$location" ]; then
    echo "Usage: lock {lock name} [{timeout in seconds}]"
    return 1
fi

local lockfile=/var/lock/$location

if [ -d $lockfile ]; then
        pid=$(<$lockfile/pid)
    if [ "$pid" == $$ ]; then
        # this process already owns the lock
        return 0
    fi

    # check to see if the process is still running
    if [ ! "$pid" ] || isEmpty `ps --no-heading $pid`; then
        rm -rf $lockfile
        echo "Removed stale lockfile: $lockfile with pid: $pid"
    fi
fi

timeleft=$timeout
local success
while true; do
    mkdir $lockfile &>/dev/null && success=true
    if [ "$success" ]; then
        echo $$ >$lockfile/pid
        break
    fi

    if [ ! "$timeout" ]; then
        break
    fi

    sleep 5
    timeleft=$((timeleft-5))
    if [ "$timeleft" -lt 0 ]; then
        break
    fi
done

if [ ! "$success" ]; then
    # failed to obtain lock after timeout
    return 1
fi

# lock obtained
return 0
}

# usage: unlock {lock name (will be in /var/lock/)}
unset unlock
unlock() {
local location=$1
if [ ! "$location" ]; then
    echo "Usage: unlock {lock name}"
    return 1
fi

rm -rf /var/lock/$location
}

