#!/bin/bash

# requires coproc, stdbuf, mysql

# Derived from: BASIC MYSQL SESSION IMPLEMENTATION FOR BASH (by Norman Geist 2015)
# Expanded by: Jeremy Gurr 2017

#  # Example usage
#  #define timeout for read command, in case of server error etc.
#  export MYSQL_READ_TIMEOUT=10
#  
#  # Connect to db and get $HANDLE
#  user=mydbuser db=mydb host=myhost mysql_connect 
#  
#  #query db and get $DATA
#  mysql_query "SELECT dt_whatever from tbl_lol WHERE dt_rofl=10"
#  
#  #close connection
#  mysql_close
#  
#  
#  $DATA[0] = affected rows/number of sets;
#  $DATA[1] = number of key=>values pairs following;
#  $DATA[2] = key1;
#  $DATA[3] = value1;
#        [...]
#  $DATA[n-1] = keyn;
#  $DATA[n]   = valuen;
#  
#  # two column query loop example
#  
#  fields=2
#  for ((i=2; $i<$((${DATA[0]}*${DATA[1]}*$fields)); i+=$((${DATA[1]}*$fields))))
#  do
#      field1key   = ${DATA[$i]};   #this is "dt_id"
#      field1value = ${DATA[$i+1]}; #this is the value for dt_id
#      field2key   = ${DATA[$i+2]}; #this is "dt_name"
#      field2value = ${DATA[$i+3]}; #this is the value  for dt_name
#  done
#
#  # managing multiple connections at the same time:
#  user=mydbuser db=mydb host=myhost1 mysql_connect && con1=$HANDLE
#  user=mydbuser db=mydb host=myhost2 mysql_connect && con2=$HANDLE
#
#  HANDLE=$con1 mysql_query "select ..."
#  HANDLE=$con2 mysql_query "select ..."
#
#  HANDLE=$con1 mysql_close
#  HANDLE=$con2 mysql_close

# set a default here
export MYSQL_READ_TIMEOUT=10

#args handle query
function mysql_check {
  local handle
  handle=(${1//_/ })
  #has right structure && is still running && we opened it?
  if [[ ${#handle[*]} == 3 ]] && ps -p ${handle[2]} 2>> /dev/null >> /dev/null && { echo "" >&${handle[1]}; } 2> /dev/null; then
    return 0
  fi
  return 1
}

# open mysql connection
# usage: user="myuser" pass="mypass" host="myhost" db="mydb" mysql_connection
#   host and pass are optional
# returns $HANDLE
function mysql_connect {
  local argv argc HANDLEID i
  out "mysql_connect host=$host db=$db user=$user pass=$pass"
  try
    #prepare args
    argv=($*)
    argc=${#argv[*]}

    host="${host:-localhost}"
    if [ "$pass" ]; then
      pass="-p$pass"
    fi

    if [[ ${#user} < 1 || ${#db} < 1 ]]; then
      echo "ERROR: Options user and db are required!"
      fail
    fi

    # init connection and channels
    # we do it in XML cause otherwise we can't detect the end of data and so would need a read timeout O_o
    HANDLEID="MYSQL$RANDOM"
    eval "coproc $HANDLEID { stdbuf -oL mysql -u $user $pass -h $host -D $db --force --unbuffered --xml -vvv 2>&1; }" 2> /dev/null
    HANDLE=$(eval 'echo ${'${HANDLEID}'[0]}_${'${HANDLEID}'[1]}_${'${HANDLEID}'_PID}')
    if mysql_check $HANDLE; then
      export HANDLE
      return 0
    else
      echo "ERROR: Connection failed to $user@$host->DB:$db!"
      fail
    fi
  end_try
  handle_return
}

# usage: HANDLE={handle} mysql_query {query}
# return: $DATA[0] = affected rows/number of sets;
#         $DATA[1] = key=>values pairs following
#         $DATA[2] = key1; DATA[3] = val1
#         $DATA[4] = key2; DATA[5] = val2 (depending on number of columns, rows)
function mysql_query {
  local handle query affected line results_open row_open cols key val
  try
    if ! mysql_check $HANDLE; then
      echo "ERROR: Connection not open!"
      return 1
    fi
    handle=(${HANDLE//_/ })

    # use this to keep track of where you are when reading this data
    export current_row=0

    # delimit query; otherwise we block forever/timeout
    query=$2
    if [[ ! "$query" =~ \;\$ ]]; then
      query="$query;"
    fi
    #send query
    echo "$query" >&${handle[1]}

    #get output
    DATA=();
    DATA[0]=0
    DATA[1]=0
    results_open=0
    row_open=0
    cols=0
    while read -t $MYSQL_READ_TIMEOUT -ru ${handle[0]} line
    do
      # WAS ERROR?
      if [[ "$line" == *"ERROR"* ]]; then
        echo "$line"
        return 1
      # WAS INSERT/UPDATE?
      elif [[ "$line" == *"Query OK"* ]]; then
        affected=$([[ "$line" =~ Query\ OK\,\ ([0-9]+)\ rows?\ affected ]] && echo ${BASH_REMATCH[1]})
        DATA[0]=$affected
        export DATA
        return 0
      fi

      # BEGIN FETCHING RESULTS
      if [[ $line =~ \<resultset ]]; then
        results_open=1
      fi

      #RESULTS
      if [[ $results_open == 1 ]]; then
        if [[ $line =~ \<row ]]; then
          row_open=1
          cols=0
        elif [[ $line =~ \<field && $row_open == 1 ]]; then
          key=$([[ "$line" =~ name\=\"([^\"]+)\" ]] && echo ${BASH_REMATCH[1]})
          val=$([[ "$line" =~ \>(.*)\<\/ ]] && echo ${BASH_REMATCH[1]} || echo "NULL")
          DATA[${#DATA[*]}]=$key
          DATA[${#DATA[*]}]=$val
          cols=$[$cols+1]
        elif [[ $line =~ \<\/row ]]; then
          row_open=0
          DATA[0]=$[${DATA[0]}+1]
          DATA[1]=$cols
          column_count=$cols
        fi
      fi

      #END OF RESULTS
      if [[ $line =~ \<\/resultset ]]; then
        export DATA
        return 0
      fi
    done
    #we can only get here
    #if read times out O_o
    echo "$FUNCNAME: Read timed out!"
  end_try
  handle_return # was return 1
}

# returns true if the previous mysql_query command returned 1 or more rows
function more_rows_to_read {
  if [ ! "${DATA:-}" ]; then
    return 1
  fi
  if [[ ${DATA[0]} > $current_row ]]; then
    return 0
  fi
  return 1
}

# usage: grab_row {var1} {var2}...
# takes data from the previously run mysql_query command and stores it into the given variables
# it will always advance to the next row for each call, even if you don't capture all of the columns of the row
function grab_row {
  local v next_data_index
  # take each var and dump a field value into it
  next_data_index=$((current_row*column_count+2+1))
  for var_name ; do
    v=${DATA[$next_data_index]}
    next_data_index=$((next_data_index+2))
    v=${v//\"/\\\"}
    eval "$var_name=\"$v\""
  done
  current_row=$((current_row+1))
}

# usage: dbfetch_single_value {query}
#   sets r={value returned}
function dbfetch_single_value {
dbexecute "$1" || return 1
if more_rows_to_read; then 
  grab_row r || return 1
fi
}

# usage: HANDLE={handle} mysql_close
function mysql_close {
  local handle
  if ! mysql_check $1; then
    echo "ERROR: Connection not open!"
    return 1
  fi
  handle=(${1//_/ })
  echo "exit;" >&${handle[1]}

  if ! mysql_check $1; then
    return 0
  else
    echo "ERROR: Couldn't close connection!"
    return 1
  fi
}

