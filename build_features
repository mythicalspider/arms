#!/bin/bash

featureset="$1"

if [ ! "$featureset" ]; then
  echo "Usage: $0 {featureset}"
  echo " from the folder containing a features and feature_sets folders"
  echo "current featuresets: $(find feature_sets -mindepth 1 -maxdepth 1 -not -name '.*' -type f -printf "%f ")"
  exit 1
fi

unset cat_no_comments
cat_no_comments() {
  cat "$@" | grep -v "^ *#"
}

unset verify_dependencies
verify_dependencies() {
  local dp=features/$feature/dependencies
  local found f
  if [ -f $dp ]; then
    for dependency in $(cat_no_comments $dp); do
      unset found
      for f in "${features[@]}"; do
        if [ "$f" == "$dependency" ]; then
          found=true
          break
        fi
      done
      if [ ! "$found" ]; then 
        echo "error: feature [$feature] requires [$dependency] to be present earlier in the featureset"
        return 1
      fi
    done
  fi
}

source lib/system_handlers

unset features
for feature in $(cat_no_comments feature_sets/$featureset); do
  if [ ! -d features/$feature ]; then
    echo "error: missing feature: $feature"
    exit 1
  fi
  verify_dependencies || exit 1
  fp=features/$feature/before 
  if [ -f "$fp" ]; then
    echo "$feature before"
    source $fp || exit 1
  fi
  features=( $feature "${features[@]}" )
done

for feature in "${features[@]}"; do
  fp=features/$feature/after
  if [ -f "$fp" ]; then
    echo "$feature after"
    source $fp || exit 1
  fi
done

